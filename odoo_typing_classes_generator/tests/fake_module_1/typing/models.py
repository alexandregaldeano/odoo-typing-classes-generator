# This file is auto-generated by Odoo Typing Classes Generator
from .base import AbstractModel, Model, TransientModel
from datetime import date
from datetime import datetime
from odoo.tools.misc import ConstantMapping
from typing import Any
from typing import Callable
from typing import List
from typing import Union


class Base(AbstractModel["Base"]):
    """
    Merged model for base, built from:
        * odoo.addons.base.models.ir_fields.O2MIdMapper
        * odoo.addons.base.models.ir_model.Base
    """

    _name = "base"


class BaseLanguageExport(TransientModel["BaseLanguageExport"]):
    """
    Merged model for base.language.export, built from:
        * odoo.addons.base.wizard.base_export_language.BaseLanguageExport
    """

    _name = "base.language.export"

    data: bytes
    format: str
    lang: str
    modules: Union["IrModuleModule", bool]
    name: str
    state: str

    def _get_languages(self):
        ...

    def act_getfile(self):
        ...


class BaseLanguageImport(TransientModel["BaseLanguageImport"]):
    """
    Merged model for base.language.import, built from:
        * odoo.addons.base.wizard.base_import_language.BaseLanguageImport
    """

    _name = "base.language.import"

    code: str
    data: bytes
    filename: str
    name: str
    overwrite: bool

    def import_lang(self):
        ...


class BaseLanguageInstall(TransientModel["BaseLanguageInstall"]):
    """
    Merged model for base.language.install, built from:
        * odoo.addons.base.wizard.base_language_install.BaseLanguageInstall
    """

    _name = "base.language.install"

    lang: str
    overwrite: bool
    state: str

    def _default_language(self):
        ...

    def _get_languages(self):
        ...

    def lang_install(self):
        ...

    def reload(self):
        ...

    def switch_lang(self):
        ...


class BaseModuleUninstall(TransientModel["BaseModuleUninstall"]):
    """
    Merged model for base.module.uninstall, built from:
        * odoo.addons.base.wizard.base_module_uninstall.BaseModuleUninstall
    """

    _name = "base.module.uninstall"

    model_ids: Union["IrModel", bool]
    module_id: Union["IrModuleModule", bool]
    module_ids: Union["IrModuleModule", bool]
    show_all: bool

    def _compute_model_ids(self):
        ...

    def _compute_module_ids(self):
        ...

    def _get_models(self):
        ...

    def _get_modules(self):
        ...

    def _onchange_module_id(self):
        ...

    def action_uninstall(self):
        ...


class BaseModuleUpdate(TransientModel["BaseModuleUpdate"]):
    """
    Merged model for base.module.update, built from:
        * odoo.addons.base.wizard.base_module_update.BaseModuleUpdate
    """

    _name = "base.module.update"

    added: int
    state: str
    updated: int

    def action_module_open(self):
        ...

    def update_module(self):
        ...


class BaseModuleUpgrade(TransientModel["BaseModuleUpgrade"]):
    """
    Merged model for base.module.upgrade, built from:
        * odoo.addons.base.wizard.base_module_upgrade.BaseModuleUpgrade
    """

    _name = "base.module.upgrade"

    module_info: str

    def _default_module_info(self):
        ...

    def config(self):
        ...

    def get_module_list(self):
        ...

    def upgrade_module(self):
        ...

    def upgrade_module_cancel(self):
        ...


class BasePartnerMergeAutomaticWizard(
    TransientModel["BasePartnerMergeAutomaticWizard"]
):
    """
    Merged model for base.partner.merge.automatic.wizard, built from:
        * odoo.addons.base.wizard.base_partner_merge.MergePartnerAutomatic
    """

    _name = "base.partner.merge.automatic.wizard"

    current_line_id: Union["BasePartnerMergeLine", bool]
    dst_partner_id: Union["ResPartner", bool]
    exclude_contact: bool
    exclude_journal_item: bool
    group_by_email: bool
    group_by_is_company: bool
    group_by_name: bool
    group_by_parent_id: bool
    group_by_vat: bool
    line_ids: Union["BasePartnerMergeLine", bool]
    maximum_group: int
    number_group: int
    partner_ids: Union["ResPartner", bool]
    state: str

    def _action_next_screen(self):
        ...

    def _compute_models(self):
        ...

    def _compute_selected_groupby(self):
        ...

    def _generate_query(self, fields, maximum_group=100):
        ...

    def _get_fk_on(self, table):
        ...

    def _get_ordered_partner(self, partner_ids):
        ...

    def _get_summable_fields(self):
        ...

    def _log_merge_operation(self, src_partners, dst_partner):
        ...

    def _merge(self, partner_ids, dst_partner=None, extra_checks=True):
        ...

    def _partner_use_in(self, aggr_ids, models):
        ...

    def _process_query(self, query):
        ...

    def _update_foreign_keys(self, src_partners, dst_partner):
        ...

    def _update_reference_fields(self, src_partners, dst_partner):
        ...

    def _update_values(self, src_partners, dst_partner):
        ...

    def action_merge(self):
        ...

    def action_skip(self):
        ...

    def action_start_automatic_process(self):
        ...

    def action_start_manual_process(self):
        ...

    def action_update_all_process(self):
        ...

    def parent_migration_process_cb(self):
        ...


class BasePartnerMergeLine(TransientModel["BasePartnerMergeLine"]):
    """
    Merged model for base.partner.merge.line, built from:
        * odoo.addons.base.wizard.base_partner_merge.MergePartnerLine
    """

    _name = "base.partner.merge.line"

    aggr_ids: str
    min_id: int
    wizard_id: Union["BasePartnerMergeAutomaticWizard", bool]


class BaseUpdateTranslations(TransientModel["BaseUpdateTranslations"]):
    """
    Merged model for base.update.translations, built from:
        * odoo.addons.base.wizard.base_update_translations.BaseUpdateTranslations
    """

    _name = "base.update.translations"

    lang: str

    def _get_lang_name(self, lang_code):
        ...

    def _get_languages(self):
        ...

    def act_update(self):
        ...


class ChangePasswordUser(TransientModel["ChangePasswordUser"]):
    """
    Merged model for change.password.user, built from:
        * odoo.addons.base.models.res_users.ChangePasswordUser
    """

    _name = "change.password.user"

    new_passwd: str
    user_id: Union["ResUsers", bool]
    user_login: str
    wizard_id: Union["ChangePasswordWizard", bool]

    def change_password_button(self):
        ...


class ChangePasswordWizard(TransientModel["ChangePasswordWizard"]):
    """
    Merged model for change.password.wizard, built from:
        * odoo.addons.base.models.res_users.ChangePasswordWizard
    """

    _name = "change.password.wizard"

    user_ids: Union["ChangePasswordUser", bool]

    def _default_user_ids(self):
        ...

    def change_password_button(self):
        ...


class DecimalPrecision(Model["DecimalPrecision"]):
    """
    Merged model for decimal.precision, built from:
        * odoo.addons.base.models.decimal_precision.DecimalPrecision
    """

    _name = "decimal.precision"

    digits: int
    name: str

    def precision_get(self, application):
        ...


class FakeModel1(Model[Union["FakeModel1", "ResPartner"]]):
    """
    Merged model for fake.model.1, built from:
        * odoo_typing_classes_generator.tests.fake_module_1.models.fake_model_1.FakeModel1

    And inherits from:
        * res.partner
    """

    _name = "fake.model.1"

    a_many_to_one_field: Union["ResCompany", bool]
    a_related_field: str
    a_text_field: str

    @classmethod
    def a_class_method(cls, an_argument: str) -> List[str]:
        ...

    @staticmethod
    def a_static_method(an_argument: bool) -> int:
        ...

    @staticmethod
    def a_static_method_with_default_arguments(
        an_argument: Callable[[], Any] = None, another_argument="world"
    ):
        ...

    def a_documented_function(self, _an_argument: int = 1) -> "ResCountry":
        ...

    def an_undocumented_method(self, _an_argument=""):
        ...


class FormatAddressMixin(AbstractModel["FormatAddressMixin"]):
    """
    Merged model for format.address.mixin, built from:
        * odoo.addons.base.models.res_partner.FormatAddressMixin
    """

    _name = "format.address.mixin"

    def _fields_view_get_address(self, arch):
        ...


class ImageMixin(AbstractModel["ImageMixin"]):
    """
    Merged model for image.mixin, built from:
        * odoo.addons.base.models.image_mixin.ImageMixin
    """

    _name = "image.mixin"

    image_1024: bytes
    image_128: bytes
    image_1920: bytes
    image_256: bytes
    image_512: bytes


class IrActionsActUrl(Model[Union["IrActionsActUrl", "IrActionsActions"]]):
    """
    Merged model for ir.actions.act_url, built from:
        * odoo.addons.base.models.ir_actions.IrActionsActUrl

    And inherits from:
        * ir.actions.actions
    """

    _name = "ir.actions.act_url"

    target: str
    url: str


class IrActionsActWindow(Model[Union["IrActionsActWindow", "IrActionsActions"]]):
    """
    Merged model for ir.actions.act_window, built from:
        * odoo.addons.base.models.ir_actions.IrActionsActWindow

    And inherits from:
        * ir.actions.actions
    """

    _name = "ir.actions.act_window"

    context: str
    domain: str
    filter: bool
    groups_id: Union["ResGroups", bool]
    limit: int
    res_id: int
    res_model: str
    search_view: str
    search_view_id: Union["IrUiView", bool]
    target: str
    usage: str
    view_id: Union["IrUiView", bool]
    view_ids: Union["IrActionsActWindowView", bool]
    view_mode: str
    views: bytes

    def _check_model(self):
        ...

    def _check_view_mode(self):
        ...

    def _compute_search_view(self):
        ...

    def _compute_views(self):
        ...

    def _existing(self):
        ...


class IrActionsActWindowClose(
    Model[Union["IrActionsActWindowClose", "IrActionsActions"]]
):
    """
    Merged model for ir.actions.act_window_close, built from:
        * odoo.addons.base.models.ir_actions.IrActionsActWindowclose

    And inherits from:
        * ir.actions.actions
    """

    _name = "ir.actions.act_window_close"


class IrActionsActWindowView(Model["IrActionsActWindowView"]):
    """
    Merged model for ir.actions.act_window.view, built from:
        * odoo.addons.base.models.ir_actions.IrActionsActWindowView
    """

    _name = "ir.actions.act_window.view"

    act_window_id: Union["IrActionsActWindow", bool]
    multi: bool
    sequence: int
    view_id: Union["IrUiView", bool]
    view_mode: str


class IrActionsActions(Model["IrActionsActions"]):
    """
    Merged model for ir.actions.actions, built from:
        * odoo.addons.base.models.ir_actions.IrActions
    """

    _name = "ir.actions.actions"

    binding_model_id: Union["IrModel", bool]
    binding_type: str
    binding_view_types: str
    help: str
    name: str
    type: str
    xml_id: str

    def _compute_xml_id(self):
        ...

    def _for_xml_id(self, full_xml_id):
        ...

    def _get_eval_context(self, action=None):
        ...

    def _get_readable_fields(self):
        ...

    def get_bindings(self, model_name):
        ...


class IrActionsClient(Model[Union["IrActionsClient", "IrActionsActions"]]):
    """
    Merged model for ir.actions.client, built from:
        * odoo.addons.base.models.ir_actions.IrActionsActClient

    And inherits from:
        * ir.actions.actions
    """

    _name = "ir.actions.client"

    context: str
    params: bytes
    params_store: bytes
    res_model: str
    tag: str
    target: str

    def _compute_params(self):
        ...

    def _inverse_params(self):
        ...


class IrActionsReport(Model[Union["IrActionsReport", "IrActionsActions"]]):
    """
    Merged model for ir.actions.report, built from:
        * odoo.addons.base.models.ir_actions_report.IrActionsReport

    And inherits from:
        * ir.actions.actions
    """

    _name = "ir.actions.report"

    attachment: str
    attachment_use: bool
    groups_id: Union["ResGroups", bool]
    model: str
    model_id: Union["IrModel", bool]
    multi: bool
    paperformat_id: Union["ReportPaperformat", bool]
    print_report_name: str
    report_file: str
    report_name: str
    report_type: str

    def _build_wkhtmltopdf_args(
        self,
        paperformat_id,
        landscape,
        specific_paperformat_args=None,
        set_viewport_size=False,
    ):
        ...

    def _compute_model_id(self):
        ...

    def _get_rendering_context(self, docids, data):
        ...

    def _get_rendering_context_model(self):
        ...

    def _get_report_from_name(self, report_name):
        ...

    def _get_unreadable_pdfs(self, streams):
        ...

    def _merge_pdfs(self, streams):
        ...

    def _post_pdf(self, save_in_attachment, pdf_content=None, res_ids=None):
        ...

    def _postprocess_pdf_report(self, record, buffer):
        ...

    def _prepare_html(self, html):
        ...

    def _raise_on_unreadable_pdfs(self, streams, stream_record):
        ...

    def _render(self, res_ids, data=None):
        ...

    def _render_qweb_html(self, docids, data=None):
        ...

    def _render_qweb_pdf(self, res_ids=None, data=None):
        ...

    def _render_qweb_text(self, docids, data=None):
        ...

    def _render_template(self, template, values=None):
        ...

    def _retrieve_stream_from_attachment(self, attachment):
        ...

    def _run_wkhtmltopdf(
        self,
        bodies,
        header=None,
        footer=None,
        landscape=False,
        specific_paperformat_args=None,
        set_viewport_size=False,
    ):
        ...

    def _search_model_id(self, operator, value):
        ...

    def associated_view(self):
        ...

    def barcode(self, barcode_type, value, **kwargs):
        ...

    def check_barcode_encoding(self, barcode, encoding):
        ...

    def create_action(self):
        ...

    def get_available_barcode_masks(self):
        ...

    def get_barcode_check_digit(self, numeric_barcode):
        ...

    def get_paperformat(self):
        ...

    def get_wkhtmltopdf_state(self):
        ...

    def report_action(self, docids, data=None, config=True):
        ...

    def retrieve_attachment(self, record):
        ...

    def unlink_action(self):
        ...


class IrActionsServer(Model[Union["IrActionsServer", "IrActionsActions"]]):
    """
    Merged model for ir.actions.server, built from:
        * odoo.addons.base.models.ir_actions.IrActionsServer

    And inherits from:
        * ir.actions.actions
    """

    _name = "ir.actions.server"

    child_ids: Union["IrActionsServer", bool]
    code: str
    crud_model_id: Union["IrModel", bool]
    crud_model_name: str
    fields_lines: Union["IrServerObjectLines", bool]
    groups_id: Union["ResGroups", bool]
    link_field_id: Union["IrModelFields", bool]
    model_id: Union["IrModel", bool]
    model_name: str
    sequence: int
    state: str
    usage: str

    def _check_python_code(self):
        ...

    def _get_runner(self):
        ...

    def _onchange_crud_model_id(self):
        ...

    def _run_action_code_multi(self, eval_context):
        ...

    def _run_action_multi(self, eval_context=None):
        ...

    def _run_action_object_create(self, eval_context=None):
        ...

    def _run_action_object_write(self, eval_context=None):
        ...

    def _select_objects(self):
        ...

    def create_action(self):
        ...

    def run(self):
        ...

    def unlink_action(self):
        ...


class IrActionsTodo(Model["IrActionsTodo"]):
    """
    Merged model for ir.actions.todo, built from:
        * odoo.addons.base.models.ir_actions.IrActionsTodo
    """

    _name = "ir.actions.todo"

    action_id: Union["IrActionsActions", bool]
    name: str
    sequence: int
    state: str

    def action_launch(self):
        ...

    def action_open(self):
        ...

    def ensure_one_open_todo(self):
        ...


class IrAttachment(Model["IrAttachment"]):
    """
    Merged model for ir.attachment, built from:
        * odoo.addons.base.models.ir_attachment.IrAttachment
    """

    _name = "ir.attachment"

    access_token: str
    checksum: str
    company_id: Union["ResCompany", bool]
    datas: bytes
    db_datas: bytes
    description: str
    file_size: int
    index_content: str
    mimetype: str
    name: str
    public: bool
    raw: bytes
    res_field: str
    res_model: str
    res_name: str
    store_fname: str
    type: str
    url: str

    def _check_contents(self, values):
        ...

    def _check_serving_attachments(self):
        ...

    def _compute_checksum(self, bin_data):
        ...

    def _compute_datas(self):
        ...

    def _compute_mimetype(self, values):
        ...

    def _compute_raw(self):
        ...

    def _compute_res_name(self):
        ...

    def _file_delete(self, fname):
        ...

    def _file_read(self, fname):
        ...

    def _file_write(self, bin_value, checksum):
        ...

    def _filestore(self):
        ...

    def _full_path(self, path):
        ...

    def _gc_file_store(self):
        ...

    def _generate_access_token(self):
        ...

    def _get_datas_related_values(self, data, mimetype):
        ...

    def _get_path(self, bin_data, sha):
        ...

    def _index(self, bin_data, file_type, checksum=None):
        ...

    def _inverse_datas(self):
        ...

    def _inverse_raw(self):
        ...

    def _mark_for_gc(self, fname):
        ...

    def _post_add_create(self):
        ...

    def _postprocess_contents(self, values):
        ...

    def _read_group_allowed_fields(self):
        ...

    def _same_content(self, bin_data, filepath):
        ...

    def _set_attachment_data(self, asbytes):
        ...

    def _storage(self):
        ...

    def action_get(self):
        ...

    def check(self, mode, values=None):
        ...

    def force_storage(self):
        ...

    def generate_access_token(self):
        ...

    def get_serve_attachment(
        self, url, extra_domain=None, extra_fields=None, order=None
    ):
        ...

    def get_serving_groups(self):
        ...


class IrAutovacuum(AbstractModel["IrAutovacuum"]):
    """
    Merged model for ir.autovacuum, built from:
        * odoo.addons.base.models.ir_autovacuum.AutoVacuum
    """

    _name = "ir.autovacuum"

    def _run_vacuum_cleaner(self):
        ...

    def power_on(self, *args, **kwargs):
        ...


class IrConfigParameter(Model["IrConfigParameter"]):
    """
    Merged model for ir.config_parameter, built from:
        * odoo.addons.base.models.ir_config_parameter.IrConfigParameter
    """

    _name = "ir.config_parameter"

    key: str
    value: str

    def _get_param(self, key):
        ...

    def get_param(self, key, default=False):
        ...

    def set_param(self, key, value):
        ...


class IrCron(Model["IrCron"]):
    """
    Merged model for ir.cron, built from:
        * odoo.addons.base.models.ir_cron.ir_cron
    """

    _name = "ir.cron"

    active: bool
    cron_name: str
    doall: bool
    interval_number: int
    interval_type: str
    ir_actions_server_id: Union["IrActionsServer", bool]
    lastcall: datetime
    nextcall: datetime
    numbercall: int
    priority: int
    user_id: Union["ResUsers", bool]

    @classmethod
    def _acquire_job(cls, db_name):
        ...

    @classmethod
    def _process_job(cls, job_cr, job, cron_cr):
        ...

    @classmethod
    def _process_jobs(cls, db_name):
        ...

    def _callback(self, cron_name, server_action_id, job_id):
        ...

    def _handle_callback_exception(
        self, cron_name, server_action_id, job_id, job_exception
    ):
        ...

    def _try_lock(self):
        ...

    def method_direct_trigger(self):
        ...

    def toggle(self, model, domain):
        ...

    def try_write(self, values):
        ...


class IrDefault(Model["IrDefault"]):
    """
    Merged model for ir.default, built from:
        * odoo.addons.base.models.ir_default.IrDefault
    """

    _name = "ir.default"

    company_id: Union["ResCompany", bool]
    condition: str
    field_id: Union["IrModelFields", bool]
    json_value: str
    user_id: Union["ResUsers", bool]

    def _check_json_format(self):
        ...

    def discard_records(self, records):
        ...

    def discard_values(self, model_name, field_name, values):
        ...

    def get(
        self, model_name, field_name, user_id=False, company_id=False, condition=False
    ):
        ...

    def get_model_defaults(self, model_name, condition=False):
        ...

    def set(
        self,
        model_name,
        field_name,
        value,
        user_id=False,
        company_id=False,
        condition=False,
    ):
        ...


class IrDemo(TransientModel["IrDemo"]):
    """
    Merged model for ir.demo, built from:
        * odoo.addons.base.models.ir_demo.IrDemo
    """

    _name = "ir.demo"

    def install_demo(self):
        ...


class IrDemoFailure(TransientModel["IrDemoFailure"]):
    """
    Merged model for ir.demo_failure, built from:
        * odoo.addons.base.models.ir_demo_failure.DemoFailure
    """

    _name = "ir.demo_failure"

    error: str
    module_id: Union["IrModuleModule", bool]
    wizard_id: Union["IrDemoFailureWizard", bool]


class IrDemoFailureWizard(TransientModel["IrDemoFailureWizard"]):
    """
    Merged model for ir.demo_failure.wizard, built from:
        * odoo.addons.base.models.ir_demo_failure.DemoFailureWizard
    """

    _name = "ir.demo_failure.wizard"

    failure_ids: Union["IrDemoFailure", bool]
    failures_count: int

    def _compute_failures_count(self):
        ...

    def done(self):
        ...


class IrExports(Model["IrExports"]):
    """
    Merged model for ir.exports, built from:
        * odoo.addons.base.models.ir_exports.IrExports
    """

    _name = "ir.exports"

    export_fields: Union["IrExportsLine", bool]
    name: str
    resource: str


class IrExportsLine(Model["IrExportsLine"]):
    """
    Merged model for ir.exports.line, built from:
        * odoo.addons.base.models.ir_exports.IrExportsLine
    """

    _name = "ir.exports.line"

    export_id: Union["IrExports", bool]
    name: str


class IrFieldsConverter(AbstractModel["IrFieldsConverter"]):
    """
    Merged model for ir.fields.converter, built from:
        * odoo.addons.base.models.ir_fields.IrFieldsConverter
    """

    _name = "ir.fields.converter"

    def _format_import_error(
        self, error_type, error_msg, error_params=(), error_args=None
    ):
        ...

    def _get_translations(self, types, src):
        ...

    def _input_tz(self):
        ...

    def _referencing_subfield(self, record):
        ...

    def _str_id(self, model, field, value):
        ...

    def _str_to_binary(self, model, field, value):
        ...

    def _str_to_boolean(self, model, field, value):
        ...

    def _str_to_char(self, model, field, value):
        ...

    def _str_to_date(self, model, field, value):
        ...

    def _str_to_datetime(self, model, field, value):
        ...

    def _str_to_float(self, model, field, value):
        ...

    def _str_to_html(self, model, field, value):
        ...

    def _str_to_integer(self, model, field, value):
        ...

    def _str_to_many2many(self, model, field, value):
        ...

    def _str_to_many2one(self, model, field, values):
        ...

    def _str_to_many2one_reference(self, model, field, value):
        ...

    def _str_to_monetary(self, model, field, value):
        ...

    def _str_to_one2many(self, model, field, records):
        ...

    def _str_to_reference(self, model, field, value):
        ...

    def _str_to_selection(self, model, field, value):
        ...

    def _str_to_text(self, model, field, value):
        ...

    def _xmlid_to_record_id(self, xmlid, model):
        ...

    def db_id_for(self, model, field, subfield, value):
        ...

    def for_model(self, model, fromtype=str):
        ...

    def to_field(self, model, field, fromtype=str):
        ...


class IrFilters(Model["IrFilters"]):
    """
    Merged model for ir.filters, built from:
        * odoo.addons.base.models.ir_filters.IrFilters
    """

    _name = "ir.filters"

    action_id: Union["IrActionsActions", bool]
    active: bool
    context: str
    domain: str
    is_default: bool
    model_id: str
    name: str
    sort: str
    user_id: Union["ResUsers", bool]

    def _check_global_default(self, vals, matching_filters):
        ...

    def _get_action_domain(self, action_id=None):
        ...

    def _get_eval_domain(self):
        ...

    def _list_all_models(self):
        ...

    def create_or_replace(self, vals):
        ...

    def get_filters(self, model, action_id=None):
        ...


class IrHttp(AbstractModel["IrHttp"]):
    """
    Merged model for ir.http, built from:
        * odoo.addons.base.models.ir_http.IrHttp
    """

    _name = "ir.http"

    @classmethod
    def _auth_method_none(cls):
        ...

    @classmethod
    def _auth_method_public(cls):
        ...

    @classmethod
    def _auth_method_user(cls):
        ...

    @classmethod
    def _authenticate(cls, endpoint):
        ...

    @classmethod
    def _binary_ir_attachment_redirect_content(
        cls, record, default_mimetype="application/octet-stream"
    ):
        ...

    @classmethod
    def _clear_routing_map(cls):
        ...

    @classmethod
    def _dispatch(cls):
        ...

    @classmethod
    def _generate_routing_rules(cls, modules, converters):
        ...

    @classmethod
    def _get_converters(cls):
        ...

    @classmethod
    def _handle_debug(cls):
        ...

    @classmethod
    def _handle_exception(cls, exception):
        ...

    @classmethod
    def _match(cls, path_info, key=None):
        ...

    @classmethod
    def _postprocess_args(cls, arguments, rule):
        ...

    @classmethod
    def _serve_attachment(cls):
        ...

    @classmethod
    def _serve_fallback(cls, exception):
        ...

    @classmethod
    def _xmlid_to_obj(cls, env, xmlid):
        ...

    @classmethod
    def routing_map(cls, key=None):
        ...

    def _binary_record_content(
        self,
        record,
        field="datas",
        filename=None,
        filename_field="name",
        default_mimetype="application/octet-stream",
    ):
        ...

    def _binary_set_headers(
        self, status, content, filename, mimetype, unique, filehash=None, download=False
    ):
        ...

    def _get_record_and_check(
        self, xmlid=None, model=None, id=None, field="datas", access_token=None
    ):
        ...

    def _response_by_status(self, status, headers, content):
        ...

    def binary_content(
        self,
        xmlid=None,
        model="ir.attachment",
        id=None,
        field="datas",
        unique=False,
        filename=None,
        filename_field="name",
        download=False,
        mimetype=None,
        default_mimetype="application/octet-stream",
        access_token=None,
    ):
        ...


class IrLogging(Model["IrLogging"]):
    """
    Merged model for ir.logging, built from:
        * odoo.addons.base.models.ir_logging.IrLogging
    """

    _name = "ir.logging"

    create_date: datetime
    create_uid: int
    dbname: str
    func: str
    level: str
    line: str
    message: str
    name: str
    path: str
    type: str
    write_date: datetime
    write_uid: int


class IrMailServer(Model["IrMailServer"]):
    """
    Merged model for ir.mail_server, built from:
        * odoo.addons.base.models.ir_mail_server.IrMailServer
    """

    _name = "ir.mail_server"

    active: bool
    name: str
    sequence: int
    smtp_debug: bool
    smtp_encryption: str
    smtp_host: str
    smtp_pass: str
    smtp_port: int
    smtp_user: str

    def _get_default_bounce_address(self):
        ...

    def _get_default_from_address(self):
        ...

    def _get_email_from(self, email_from):
        ...

    def _get_test_email_addresses(self):
        ...

    def _onchange_encryption(self):
        ...

    def _smtp_login(self, connection, smtp_user, smtp_password):
        ...

    def build_email(
        self,
        email_from,
        email_to,
        subject,
        body,
        email_cc=None,
        email_bcc=None,
        reply_to=False,
        attachments=None,
        message_id=None,
        references=None,
        object_id=False,
        subtype="plain",
        headers=None,
        body_alternative=None,
        subtype_alternative="plain",
    ):
        ...

    def connect(
        self,
        host=None,
        port=None,
        user=None,
        password=None,
        encryption=None,
        smtp_debug=False,
        mail_server_id=None,
    ):
        ...

    def send_email(
        self,
        message,
        mail_server_id=None,
        smtp_server=None,
        smtp_port=None,
        smtp_user=None,
        smtp_password=None,
        smtp_encryption=None,
        smtp_debug=False,
        smtp_session=None,
    ):
        ...

    def test_smtp_connection(self):
        ...


class IrModel(Model["IrModel"]):
    """
    Merged model for ir.model, built from:
        * odoo.addons.base.models.ir_model.IrModel
    """

    _name = "ir.model"

    access_ids: Union["IrModelAccess", bool]
    count: int
    field_id: Union["IrModelFields", bool]
    info: str
    inherited_model_ids: Union["IrModel", bool]
    model: str
    modules: str
    name: str
    order: str
    rule_ids: Union["IrRule", bool]
    state: str
    transient: bool
    view_ids: Union["IrUiView", bool]

    def _add_manual_models(self):
        ...

    def _check_model_name(self):
        ...

    def _check_order(self):
        ...

    def _compute_count(self):
        ...

    def _default_field_id(self):
        ...

    def _drop_table(self):
        ...

    def _get(self, name):
        ...

    def _get_id(self, name):
        ...

    def _in_modules(self):
        ...

    def _inherited_models(self):
        ...

    def _instanciate(self, model_data):
        ...

    def _reflect_model_params(self, model):
        ...

    def _reflect_models(self, model_names):
        ...

    def _view_ids(self):
        ...


class IrModelAccess(Model["IrModelAccess"]):
    """
    Merged model for ir.model.access, built from:
        * odoo.addons.base.models.ir_model.IrModelAccess
    """

    _name = "ir.model.access"

    active: bool
    group_id: Union["ResGroups", bool]
    model_id: Union["IrModel", bool]
    name: str
    perm_create: bool
    perm_read: bool
    perm_unlink: bool
    perm_write: bool

    @classmethod
    def register_cache_clearing_method(cls, model, method):
        ...

    @classmethod
    def unregister_cache_clearing_method(cls, model, method):
        ...

    def call_cache_clearing_methods(self):
        ...

    def check(self, model, mode="read", raise_exception=True):
        ...

    def check_group(self, model, mode, group_ids):
        ...

    def check_groups(self, group):
        ...

    def group_names_with_access(self, model_name, access_mode):
        ...


class IrModelConstraint(Model["IrModelConstraint"]):
    """
    Merged model for ir.model.constraint, built from:
        * odoo.addons.base.models.ir_model.IrModelConstraint
    """

    _name = "ir.model.constraint"

    create_date: datetime
    definition: str
    message: str
    model: Union["IrModel", bool]
    module: Union["IrModuleModule", bool]
    name: str
    type: str
    write_date: datetime

    def _module_data_uninstall(self):
        ...

    def _reflect_constraint(
        self, model, conname, type, definition, module, message=None
    ):
        ...

    def _reflect_constraints(self, model_names):
        ...

    def _reflect_model(self, model):
        ...


class IrModelData(Model["IrModelData"]):
    """
    Merged model for ir.model.data, built from:
        * odoo.addons.base.models.ir_model.IrModelData
    """

    _name = "ir.model.data"

    complete_name: str
    model: str
    module: str
    name: str
    noupdate: bool
    reference: str

    def _build_update_xmlids_query(self, sub_rows, update):
        ...

    def _compute_complete_name(self):
        ...

    def _compute_reference(self):
        ...

    def _get_id(self, module, xml_id):
        ...

    def _load_xmlid(self, xml_id):
        ...

    def _lookup_xmlids(self, xml_ids, model):
        ...

    def _module_data_uninstall(self, modules_to_remove):
        ...

    def _process_end(self, modules):
        ...

    def _process_end_unlink_record(self, record):
        ...

    def _update_xmlids(self, data_list, update=False):
        ...

    def check_object_reference(self, module, xml_id, raise_on_access_error=False):
        ...

    def get_object(self, module, xml_id):
        ...

    def get_object_reference(self, module, xml_id):
        ...

    def toggle_noupdate(self, model, res_id):
        ...

    def xmlid_lookup(self, xmlid):
        ...

    def xmlid_to_object(self, xmlid, raise_if_not_found=False):
        ...

    def xmlid_to_res_id(self, xmlid, raise_if_not_found=False):
        ...

    def xmlid_to_res_model_res_id(self, xmlid, raise_if_not_found=False):
        ...


class IrModelFields(Model["IrModelFields"]):
    """
    Merged model for ir.model.fields, built from:
        * odoo.addons.base.models.ir_model.IrModelFields
    """

    _name = "ir.model.fields"

    column1: str
    column2: str
    complete_name: str
    compute: str
    copied: bool
    depends: str
    domain: str
    field_description: str
    group_expand: bool
    groups: Union["ResGroups", bool]
    help: str
    index: bool
    model: str
    model_id: Union["IrModel", bool]
    modules: str
    name: str
    on_delete: str
    readonly: bool
    related: str
    related_field_id: Union["IrModelFields", bool]
    relation: str
    relation_field: str
    relation_field_id: Union["IrModelFields", bool]
    relation_table: str
    required: bool
    selectable: bool
    selection: str
    selection_ids: Union["IrModelFieldsSelection", bool]
    size: int
    state: str
    store: bool
    translate: bool
    ttype: str

    def _add_manual_fields(self, model):
        ...

    def _all_manual_field_data(self):
        ...

    def _check_depends(self):
        ...

    def _check_domain(self):
        ...

    def _check_name(self):
        ...

    def _check_related(self):
        ...

    def _check_relation_table(self):
        ...

    def _compute_copied(self):
        ...

    def _compute_related_field_id(self):
        ...

    def _compute_relation_field_id(self):
        ...

    def _compute_selection(self):
        ...

    def _custom_many2many_names(self, model_name, comodel_name):
        ...

    def _drop_column(self):
        ...

    def _existing_field_data(self, model_name):
        ...

    def _get(self, model_name, name):
        ...

    def _get_ids(self, model_name):
        ...

    def _get_manual_field_data(self, model_name):
        ...

    def _in_modules(self):
        ...

    def _instanciate(self, field_data):
        ...

    def _instanciate_attrs(self, field_data):
        ...

    def _inverse_selection(self):
        ...

    def _onchange_compute(self):
        ...

    def _onchange_related(self):
        ...

    def _onchange_relation_table(self):
        ...

    def _onchange_required(self):
        ...

    def _onchange_ttype(self):
        ...

    def _prepare_update(self):
        ...

    def _reflect_field_params(self, field, model_id):
        ...

    def _reflect_fields(self, model_names):
        ...

    def _related_field(self):
        ...


class IrModelFieldsSelection(Model["IrModelFieldsSelection"]):
    """
    Merged model for ir.model.fields.selection, built from:
        * odoo.addons.base.models.ir_model.IrModelSelection
    """

    _name = "ir.model.fields.selection"

    field_id: Union["IrModelFields", bool]
    name: str
    sequence: int
    value: str

    def _existing_selection_data(self, model_name, field_name):
        ...

    def _get_records(self):
        ...

    def _get_selection(self, field_id):
        ...

    def _get_selection_data(self, field_id):
        ...

    def _process_ondelete(self):
        ...

    def _reflect_selections(self, model_names):
        ...

    def _update_selection(self, model_name, field_name, selection):
        ...


class IrModelRelation(Model["IrModelRelation"]):
    """
    Merged model for ir.model.relation, built from:
        * odoo.addons.base.models.ir_model.IrModelRelation
    """

    _name = "ir.model.relation"

    create_date: datetime
    model: Union["IrModel", bool]
    module: Union["IrModuleModule", bool]
    name: str
    write_date: datetime

    def _module_data_uninstall(self):
        ...

    def _reflect_relation(self, model, table, module):
        ...


class IrModuleCategory(Model["IrModuleCategory"]):
    """
    Merged model for ir.module.category, built from:
        * odoo.addons.base.models.ir_module.ModuleCategory
        * odoo.addons.base.models.res_users.ModuleCategory
    """

    _name = "ir.module.category"

    child_ids: Union["IrModuleCategory", bool]
    description: str
    exclusive: bool
    module_ids: Union["IrModuleModule", bool]
    module_nr: int
    name: str
    parent_id: Union["IrModuleCategory", bool]
    sequence: int
    visible: bool
    xml_id: str

    def _compute_module_nr(self):
        ...

    def _compute_xml_id(self):
        ...


class IrModuleModule(Model["IrModuleModule"]):
    """
    Merged model for ir.module.module, built from:
        * odoo.addons.base.models.ir_module.Module
    """

    _name = "ir.module.module"

    application: bool
    author: str
    auto_install: bool
    category_id: Union["IrModuleCategory", bool]
    contributors: str
    demo: bool
    dependencies_id: Union["IrModuleModuleDependency", bool]
    description: str
    description_html: str
    exclusion_ids: Union["IrModuleModuleExclusion", bool]
    has_iap: bool
    icon: str
    icon_image: bytes
    installed_version: str
    latest_version: str
    license: str
    maintainer: str
    menus_by_module: str
    name: str
    published_version: str
    reports_by_module: str
    sequence: int
    shortdesc: str
    state: str
    summary: str
    to_buy: bool
    url: str
    views_by_module: str
    website: str

    @classmethod
    def check_external_dependencies(cls, module_name, newstate="to install"):
        ...

    @classmethod
    def get_module_info(cls, name):
        ...

    @staticmethod
    def get_values_from_terp(terp):
        ...

    def _button_immediate_function(self, function):
        ...

    def _check(self):
        ...

    def _compute_has_iap(self):
        ...

    def _get_desc(self):
        ...

    def _get_icon_image(self):
        ...

    def _get_latest_version(self):
        ...

    def _get_modules_to_load_domain(self):
        ...

    def _get_views(self):
        ...

    def _installed(self):
        ...

    def _remove_copied_views(self):
        ...

    def _state_update(self, newstate, states_to_update, level=100):
        ...

    def _update_category(self, category="Uncategorized"):
        ...

    def _update_dependencies(self, depends=None, auto_install_requirements=()):
        ...

    def _update_exclusions(self, excludes=None):
        ...

    def _update_translations(self, filter_lang=None, overwrite=False):
        ...

    def button_immediate_install(self):
        ...

    def button_immediate_uninstall(self):
        ...

    def button_immediate_upgrade(self):
        ...

    def button_install(self):
        ...

    def button_install_cancel(self):
        ...

    def button_uninstall(self):
        ...

    def button_uninstall_cancel(self):
        ...

    def button_uninstall_wizard(self):
        ...

    def button_upgrade(self):
        ...

    def button_upgrade_cancel(self):
        ...

    def download(self, download=True):
        ...

    def downstream_dependencies(
        self,
        known_deps=None,
        exclude_states=("uninstalled", "uninstallable", "to remove"),
    ):
        ...

    def get_apps_server(self):
        ...

    def install_from_urls(self, urls):
        ...

    def module_uninstall(self):
        ...

    def next(self):
        ...

    def search_panel_select_range(self, field_name, **kwargs):
        ...

    def update_list(self):
        ...

    def upstream_dependencies(
        self,
        known_deps=None,
        exclude_states=("installed", "uninstallable", "to remove"),
    ):
        ...


class IrModuleModuleDependency(Model["IrModuleModuleDependency"]):
    """
    Merged model for ir.module.module.dependency, built from:
        * odoo.addons.base.models.ir_module.ModuleDependency
    """

    _name = "ir.module.module.dependency"

    auto_install_required: bool
    depend_id: Union["IrModuleModule", bool]
    module_id: Union["IrModuleModule", bool]
    name: str
    state: str

    def _compute_depend(self):
        ...

    def _compute_state(self):
        ...

    def _search_depend(self, operator, value):
        ...


class IrModuleModuleExclusion(Model["IrModuleModuleExclusion"]):
    """
    Merged model for ir.module.module.exclusion, built from:
        * odoo.addons.base.models.ir_module.ModuleExclusion
    """

    _name = "ir.module.module.exclusion"

    exclusion_id: Union["IrModuleModule", bool]
    module_id: Union["IrModuleModule", bool]
    name: str
    state: str

    def _compute_exclusion(self):
        ...

    def _compute_state(self):
        ...

    def _search_exclusion(self, operator, value):
        ...


class IrProperty(Model["IrProperty"]):
    """
    Merged model for ir.property, built from:
        * odoo.addons.base.models.ir_property.Property
    """

    _name = "ir.property"

    company_id: Union["ResCompany", bool]
    fields_id: Union["IrModelFields", bool]
    name: str
    res_id: str
    type: str
    value_binary: bytes
    value_datetime: datetime
    value_float: float
    value_integer: int
    value_reference: str
    value_text: str

    def _get(self, name, model, res_id=False):
        ...

    def _get_default_property(self, name, model):
        ...

    def _get_domain(self, prop_name, model):
        ...

    def _get_multi(self, name, model, ids):
        ...

    def _get_property(self, name, model, res_id):
        ...

    def _set_default(self, name, model, value, company=False):
        ...

    def _set_multi(self, name, model, values, default_value=None):
        ...

    def _update_values(self, values):
        ...

    def get_by_record(self):
        ...

    def search_multi(self, name, model, operator, value):
        ...


class IrQweb(AbstractModel["IrQweb"]):
    """
    Merged model for ir.qweb, built from:
        * odoo.addons.base.models.ir_qweb.IrQWeb
    """

    _name = "ir.qweb"

    def _append(self, item):
        ...

    def _append_attributes(self):
        ...

    def _base_module(self):
        ...

    def _call_def(self, name, append="append", values="values"):
        ...

    def _compile_all_attributes(self, el, options, attr_already_created=False):
        ...

    def _compile_directive_call(self, el, options):
        ...

    def _compile_directive_call_assets(self, el, options):
        ...

    def _compile_directive_content(self, el, options):
        ...

    def _compile_directive_debug(self, el, options):
        ...

    def _compile_directive_elif(self, el, options):
        ...

    def _compile_directive_else(self, el, options):
        ...

    def _compile_directive_esc(self, el, options):
        ...

    def _compile_directive_field(self, el, options):
        ...

    def _compile_directive_foreach(self, el, options):
        ...

    def _compile_directive_groups(self, el, options):
        ...

    def _compile_directive_if(self, el, options):
        ...

    def _compile_directive_lang(self, el, options):
        ...

    def _compile_directive_raw(self, el, options):
        ...

    def _compile_directive_set(self, el, options):
        ...

    def _compile_directive_tag(self, el, options):
        ...

    def _compile_directives(self, el, options):
        ...

    def _compile_dynamic_attributes(self, el, options):
        ...

    def _compile_expr(self, expr):
        ...

    def _compile_expr0(self, expr):
        ...

    def _compile_format(self, f):
        ...

    def _compile_node(self, el, options):
        ...

    def _compile_static_attributes(self, el, options):
        ...

    def _compile_static_node(self, el, options):
        ...

    def _compile_strexpr(self, expr):
        ...

    def _compile_tag(self, el, content, options, attr_already_created=False):
        ...

    def _compile_tail(self, el):
        ...

    def _compile_widget(self, el, expression, field_options):
        ...

    def _compile_widget_options(self, el):
        ...

    def _compile_widget_value(self, el, options):
        ...

    def _create_def(self, options, body, prefix="fn", lineno=None):
        ...

    def _directives_eval_order(self):
        ...

    def _extend(self, items):
        ...

    def _get_asset_content(self, xmlid, options):
        ...

    def _get_asset_link_urls(self, xmlid, options):
        ...

    def _get_asset_nodes(
        self,
        xmlid,
        options,
        css=True,
        js=True,
        debug=False,
        async_load=False,
        defer_load=False,
        lazy_load=False,
        values=None,
    ):
        ...

    def _get_attr_bool(self, attr, default=False):
        ...

    def _get_dynamic_att(self, tagName, atts, options, values):
        ...

    def _get_field(
        self, record, field_name, expression, tagName, field_options, options, values
    ):
        ...

    def _get_template_cache_keys(self):
        ...

    def _get_widget(self, value, expression, tagName, field_options, options, values):
        ...

    def _if_content_is_not_Falsy(self, body, orelse):
        ...

    def _is_static_node(self, el, options):
        ...

    def _load(self, name, options):
        ...

    def _make_name(self, prefix="var"):
        ...

    def _post_processing_att(self, tagName, atts, options):
        ...

    def _profiling(self, astmod, options):
        ...

    def _render(self, id_or_xml_id, values=None, **options):
        ...

    def _values_var(self, varname, ctx):
        ...

    def compile(self, id_or_xml_id, options):
        ...

    def default_values(self):
        ...

    def format(self, value, formating, *args, **kwargs):
        ...

    def get_asset_bundle(self, xmlid, files, env=None):
        ...

    def get_template(self, template, options):
        ...


class IrQwebField(AbstractModel["IrQwebField"]):
    """
    Merged model for ir.qweb.field, built from:
        * odoo.addons.base.models.ir_qweb_fields.FieldConverter
    """

    _name = "ir.qweb.field"

    def attributes(self, record, field_name, options, values=None):
        ...

    def get_available_options(self):
        ...

    def record_to_html(self, record, field_name, options):
        ...

    def user_lang(self):
        ...

    def value_to_html(self, value, options):
        ...


class IrQwebFieldBarcode(AbstractModel[Union["IrQwebFieldBarcode", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.barcode, built from:
        * odoo.addons.base.models.ir_qweb_fields.BarcodeConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.barcode"


class IrQwebFieldContact(
    AbstractModel[Union["IrQwebFieldContact", "IrQwebFieldMany2one"]]
):
    """
    Merged model for ir.qweb.field.contact, built from:
        * odoo.addons.base.models.ir_qweb_fields.Contact

    And inherits from:
        * ir.qweb.field.many2one
    """

    _name = "ir.qweb.field.contact"

    def get_available_options(self):
        ...


class IrQwebFieldDate(AbstractModel[Union["IrQwebFieldDate", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.date, built from:
        * odoo.addons.base.models.ir_qweb_fields.DateConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.date"


class IrQwebFieldDatetime(AbstractModel[Union["IrQwebFieldDatetime", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.datetime, built from:
        * odoo.addons.base.models.ir_qweb_fields.DateTimeConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.datetime"


class IrQwebFieldDuration(AbstractModel[Union["IrQwebFieldDuration", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.duration, built from:
        * odoo.addons.base.models.ir_qweb_fields.DurationConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.duration"


class IrQwebFieldFloat(AbstractModel[Union["IrQwebFieldFloat", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.float, built from:
        * odoo.addons.base.models.ir_qweb_fields.FloatConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.float"


class IrQwebFieldFloatTime(AbstractModel[Union["IrQwebFieldFloatTime", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.float_time, built from:
        * odoo.addons.base.models.ir_qweb_fields.FloatTimeConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.float_time"


class IrQwebFieldHtml(AbstractModel[Union["IrQwebFieldHtml", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.html, built from:
        * odoo.addons.base.models.ir_qweb_fields.HTMLConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.html"


class IrQwebFieldImage(AbstractModel[Union["IrQwebFieldImage", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.image, built from:
        * odoo.addons.base.models.ir_qweb_fields.ImageConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.image"


class IrQwebFieldImageUrl(
    AbstractModel[Union["IrQwebFieldImageUrl", "IrQwebFieldImage"]]
):
    """
    Merged model for ir.qweb.field.image_url, built from:
        * odoo.addons.base.models.ir_qweb_fields.ImageUrlConverter

    And inherits from:
        * ir.qweb.field.image
    """

    _name = "ir.qweb.field.image_url"


class IrQwebFieldInteger(AbstractModel[Union["IrQwebFieldInteger", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.integer, built from:
        * odoo.addons.base.models.ir_qweb_fields.IntegerConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.integer"


class IrQwebFieldMany2many(AbstractModel[Union["IrQwebFieldMany2many", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.many2many, built from:
        * odoo.addons.base.models.ir_qweb_fields.ManyToManyConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.many2many"


class IrQwebFieldMany2one(AbstractModel[Union["IrQwebFieldMany2one", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.many2one, built from:
        * odoo.addons.base.models.ir_qweb_fields.ManyToOneConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.many2one"


class IrQwebFieldMonetary(AbstractModel[Union["IrQwebFieldMonetary", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.monetary, built from:
        * odoo.addons.base.models.ir_qweb_fields.MonetaryConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.monetary"


class IrQwebFieldQweb(AbstractModel[Union["IrQwebFieldQweb", "IrQwebFieldMany2one"]]):
    """
    Merged model for ir.qweb.field.qweb, built from:
        * odoo.addons.base.models.ir_qweb_fields.QwebView

    And inherits from:
        * ir.qweb.field.many2one
    """

    _name = "ir.qweb.field.qweb"

    def record_to_html(self, record, field_name, options):
        ...


class IrQwebFieldRelative(AbstractModel[Union["IrQwebFieldRelative", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.relative, built from:
        * odoo.addons.base.models.ir_qweb_fields.RelativeDatetimeConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.relative"


class IrQwebFieldSelection(AbstractModel[Union["IrQwebFieldSelection", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.selection, built from:
        * odoo.addons.base.models.ir_qweb_fields.SelectionConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.selection"


class IrQwebFieldText(AbstractModel[Union["IrQwebFieldText", "IrQwebField"]]):
    """
    Merged model for ir.qweb.field.text, built from:
        * odoo.addons.base.models.ir_qweb_fields.TextConverter

    And inherits from:
        * ir.qweb.field
    """

    _name = "ir.qweb.field.text"


class IrRule(Model["IrRule"]):
    """
    Merged model for ir.rule, built from:
        * odoo.addons.base.models.ir_rule.IrRule
    """

    _name = "ir.rule"

    # global: bool  # This field name is a Python keyword
    active: bool
    domain_force: str
    groups: Union["ResGroups", bool]
    model_id: Union["IrModel", bool]
    name: str
    perm_create: bool
    perm_read: bool
    perm_unlink: bool
    perm_write: bool

    def _check_model_name(self):
        ...

    def _compute_domain(self, model_name, mode="read"):
        ...

    def _compute_domain_context_values(self):
        ...

    def _compute_domain_keys(self):
        ...

    def _compute_global(self):
        ...

    def _eval_context(self):
        ...

    def _eval_context_for_combinations(self):
        ...

    def _get_failing(self, for_records, mode="read"):
        ...

    def _get_rules(self, model_name, mode="read"):
        ...

    def _make_access_error(self, operation, records):
        ...

    def clear_cache(self):
        ...

    def domain_get(self, model_name, mode="read"):
        ...


class IrSequence(Model["IrSequence"]):
    """
    Merged model for ir.sequence, built from:
        * odoo.addons.base.models.ir_sequence.IrSequence
    """

    _name = "ir.sequence"

    active: bool
    code: str
    company_id: Union["ResCompany", bool]
    date_range_ids: Union["IrSequenceDateRange", bool]
    implementation: str
    name: str
    number_increment: int
    number_next: int
    number_next_actual: int
    padding: int
    prefix: str
    suffix: str
    use_date_range: bool

    def _create_date_range_seq(self, date):
        ...

    def _get_current_sequence(self, sequence_date=None):
        ...

    def _get_number_next_actual(self):
        ...

    def _get_prefix_suffix(self, date=None, date_range=None):
        ...

    def _next(self, sequence_date=None):
        ...

    def _next_do(self):
        ...

    def _set_number_next_actual(self):
        ...

    def get(self, code):
        ...

    def get_id(self, sequence_code_or_id, code_or_id="id"):
        ...

    def get_next_char(self, number_next):
        ...

    def next_by_code(self, sequence_code, sequence_date=None):
        ...

    def next_by_id(self, sequence_date=None):
        ...


class IrSequenceDateRange(Model["IrSequenceDateRange"]):
    """
    Merged model for ir.sequence.date_range, built from:
        * odoo.addons.base.models.ir_sequence.IrSequenceDateRange
    """

    _name = "ir.sequence.date_range"

    date_from: date
    date_to: date
    number_next: int
    number_next_actual: int
    sequence_id: Union["IrSequence", bool]

    def _alter_sequence(self, number_increment=None, number_next=None):
        ...

    def _get_number_next_actual(self):
        ...

    def _next(self):
        ...

    def _set_number_next_actual(self):
        ...


class IrServerObjectLines(Model["IrServerObjectLines"]):
    """
    Merged model for ir.server.object.lines, built from:
        * odoo.addons.base.models.ir_actions.IrServerObjectLines
    """

    _name = "ir.server.object.lines"

    col1: Union["IrModelFields", bool]
    evaluation_type: str
    server_id: Union["IrActionsServer", bool]
    value: str

    def _compute_resource_ref(self):
        ...

    def _raise_many2many_error(self):
        ...

    def _selection_target_model(self):
        ...

    def _set_resource_ref(self):
        ...

    def eval_value(self, eval_context=None):
        ...


class IrTranslation(Model["IrTranslation"]):
    """
    Merged model for ir.translation, built from:
        * odoo.addons.base.models.ir_translation.IrTranslation
    """

    _name = "ir.translation"

    comments: str
    lang: str
    module: str
    name: str
    res_id: int
    src: str
    state: str
    type: str
    value: str

    def _check_value(self):
        ...

    def _get_ids(self, name, tt, lang, ids):
        ...

    def _get_import_cursor(self, overwrite):
        ...

    def _get_languages(self):
        ...

    def _get_source(self, name, types, lang, source=None, res_id=None):
        ...

    def _get_source_query(self, name, types, lang, source, res_id):
        ...

    def _get_terms_mapping(self, field, records):
        ...

    def _get_terms_query(self, field, records):
        ...

    def _get_terms_translations(self, field, records):
        ...

    def _load_module_terms(self, modules, langs, overwrite=False):
        ...

    def _modified(self):
        ...

    def _modified_model(self, model_name):
        ...

    def _set_ids(self, name, tt, lang, ids, value, src=None):
        ...

    def _set_source(self, name, ids, src):
        ...

    def _sync_terms_translations(self, field, records):
        ...

    def _update_translations(self, vals_list):
        ...

    def _upsert_translations(self, vals_list):
        ...

    def check(self, mode):
        ...

    def get_field_help(self, model_name):
        ...

    def get_field_selection(self, model_name, field_name):
        ...

    def get_field_string(self, model_name):
        ...

    def get_technical_translations(self, model_name):
        ...

    def get_translations_for_webclient(self, mods, lang):
        ...

    def get_web_translations_hash(self, mods, lang):
        ...

    def insert_missing(self, field, records):
        ...

    def translate_fields(self, model, id, field=None):
        ...


class IrUiMenu(Model["IrUiMenu"]):
    """
    Merged model for ir.ui.menu, built from:
        * odoo.addons.base.models.ir_ui_menu.IrUiMenu
    """

    _name = "ir.ui.menu"

    active: bool
    child_id: Union["IrUiMenu", bool]
    complete_name: str
    groups_id: Union["ResGroups", bool]
    name: str
    parent_id: Union["IrUiMenu", bool]
    parent_path: str
    sequence: int
    web_icon: str
    web_icon_data: bytes

    def _check_parent_id(self):
        ...

    def _compute_complete_name(self):
        ...

    def _compute_web_icon_data(self, web_icon):
        ...

    def _filter_visible_menus(self):
        ...

    def _get_full_name(self, level=6):
        ...

    def _set_menuitems_xmlids(self, menu_root):
        ...

    def _visible_menu_ids(self, debug=False):
        ...

    def get_user_roots(self):
        ...

    def load_menus(self, debug):
        ...

    def load_menus_root(self):
        ...

    def read_image(self, path):
        ...


class IrUiView(Model["IrUiView"]):
    """
    Merged model for ir.ui.view, built from:
        * odoo.addons.base.models.ir_ui_view.View
    """

    _name = "ir.ui.view"

    active: bool
    arch: str
    arch_base: str
    arch_db: str
    arch_fs: str
    arch_prev: str
    arch_updated: bool
    field_parent: str
    groups_id: Union["ResGroups", bool]
    inherit_children_ids: Union["IrUiView", bool]
    inherit_id: Union["IrUiView", bool]
    key: str
    mode: str
    model: str
    model_data_id: Union["IrModelData", bool]
    name: str
    priority: int
    type: str
    xml_id: str

    def _apply_groups(self, node, name_manager, node_info):
        ...

    def _apply_view_inheritance(self, source, inherit_tree):
        ...

    def _att_list(self, name):
        ...

    def _check_000_inheritance(self):
        ...

    def _check_dropdown_menu(self, node):
        ...

    def _check_groups(self):
        ...

    def _check_progress_bar(self, node):
        ...

    def _check_view_access(self):
        ...

    def _check_xml(self):
        ...

    def _compute_arch(self):
        ...

    def _compute_arch_base(self):
        ...

    def _compute_defaults(self, values):
        ...

    def _compute_model_data_id(self):
        ...

    def _compute_xml_id(self):
        ...

    def _contains_branded(self, node):
        ...

    def _create_all_specific_views(self, processed_modules):
        ...

    def _get_client_domain_variables(self, domain, key, expr):
        ...

    def _get_field_domain_variables(self, node, field, editable):
        ...

    def _get_filter_xmlid_query(self):
        ...

    def _get_inheriting_views_arch_domain(self, model):
        ...

    def _get_server_domain_variables(self, domain, key, Model):
        ...

    def _get_specific_views(self):
        ...

    def _inverse_arch(self):
        ...

    def _inverse_arch_base(self):
        ...

    def _load_records_write_on_cow(self, cow_view, inherit_id, values):
        ...

    def _pop_view_branding(self, element):
        ...

    def _postprocess_access_rights(self, model, node):
        ...

    def _postprocess_on_change(self, model_name, arch):
        ...

    def _postprocess_tag_calendar(self, node, name_manager, node_info):
        ...

    def _postprocess_tag_field(self, node, name_manager, node_info):
        ...

    def _postprocess_tag_form(self, node, name_manager, node_info):
        ...

    def _postprocess_tag_groupby(self, node, name_manager, node_info):
        ...

    def _postprocess_tag_label(self, node, name_manager, node_info):
        ...

    def _postprocess_tag_search(self, node, name_manager, node_info):
        ...

    def _postprocess_tag_tree(self, node, name_manager, node_info):
        ...

    def _postprocess_view(self, node, model, validate=True, editable=True):
        ...

    def _prepare_qcontext(self):
        ...

    def _read_template(self, view_id):
        ...

    def _read_template_keys(self):
        ...

    def _render(self, values=None, engine="ir.qweb", minimal_qcontext=False):
        ...

    def _render_template(self, template, values=None, engine="ir.qweb"):
        ...

    def _search_model_data_id(self, operator, value):
        ...

    def _valid_inheritance(self, arch):
        ...

    def _validate_attrs(self, node, name_manager, node_info):
        ...

    def _validate_classes(self, node, expr):
        ...

    def _validate_custom_views(self, model):
        ...

    def _validate_fa_class_accessibility(self, node, description):
        ...

    def _validate_module_views(self, module):
        ...

    def _validate_tag_a(self, node, name_manager, node_info):
        ...

    def _validate_tag_button(self, node, name_manager, node_info):
        ...

    def _validate_tag_div(self, node, name_manager, node_info):
        ...

    def _validate_tag_field(self, node, name_manager, node_info):
        ...

    def _validate_tag_graph(self, node, name_manager, node_info):
        ...

    def _validate_tag_groupby(self, node, name_manager, node_info):
        ...

    def _validate_tag_img(self, node, name_manager, node_info):
        ...

    def _validate_tag_label(self, node, name_manager, node_info):
        ...

    def _validate_tag_page(self, node, name_manager, node_info):
        ...

    def _validate_tag_search(self, node, name_manager, node_info):
        ...

    def _validate_tag_searchpanel(self, node, name_manager, node_info):
        ...

    def _validate_tag_tree(self, node, name_manager, node_info):
        ...

    def _validate_tag_ul(self, node, name_manager, node_info):
        ...

    def apply_inheritance_specs(
        self, source, specs_tree, pre_locate: Callable[[Any], Any] = None
    ):
        ...

    def apply_view_inheritance(self, source, model):
        ...

    def clear_cache(self):
        ...

    def default_view(self, model, view_type):
        ...

    def distribute_branding(
        self, e, branding=None, parent_xpath="", index_map=ConstantMapping(1)
    ):
        ...

    def get_inheriting_views_arch(self, model):
        ...

    def get_view_id(self, template):
        ...

    def get_view_xmlid(self):
        ...

    def handle_view_error(
        self, message, raise_exception=True, from_exception=None, from_traceback=None
    ):
        ...

    def inherit_branding(self, specs_tree):
        ...

    def is_node_branded(self, node):
        ...

    def locate_node(self, arch, spec):
        ...

    def open_translations(self):
        ...

    def postprocess(self, node, current_node_path, editable, name_manager):
        ...

    def postprocess_and_fields(self, node, model=None, validate=False):
        ...

    def read_combined(self, fields=None):
        ...

    def read_template(self, xml_id):
        ...

    def render_public_asset(self, template, values=None):
        ...

    def reset_arch(self, mode="soft"):
        ...


class IrUiViewCustom(Model["IrUiViewCustom"]):
    """
    Merged model for ir.ui.view.custom, built from:
        * odoo.addons.base.models.ir_ui_view.ViewCustom
    """

    _name = "ir.ui.view.custom"

    arch: str
    ref_id: Union["IrUiView", bool]
    user_id: Union["ResUsers", bool]


class ReportBaseReportIrmodulereference(
    AbstractModel["ReportBaseReportIrmodulereference"]
):
    """
    Merged model for report.base.report_irmodulereference, built from:
        * odoo.addons.base.report.report_base_report_irmodulereference.IrModelReferenceReport
    """

    _name = "report.base.report_irmodulereference"

    def _fields_find(self, model, module):
        ...

    def _get_report_values(self, docids, data=None):
        ...

    def _object_find(self, module):
        ...


class ReportLayout(Model["ReportLayout"]):
    """
    Merged model for report.layout, built from:
        * odoo.addons.base.models.report_layout.ReportLayout
    """

    _name = "report.layout"

    image: str
    name: str
    pdf: str
    sequence: int
    view_id: Union["IrUiView", bool]


class ReportPaperformat(Model["ReportPaperformat"]):
    """
    Merged model for report.paperformat, built from:
        * odoo.addons.base.models.report_paperformat.report_paperformat
    """

    _name = "report.paperformat"

    default: bool
    dpi: int
    format: str
    header_line: bool
    header_spacing: int
    margin_bottom: float
    margin_left: float
    margin_right: float
    margin_top: float
    name: str
    orientation: str
    page_height: int
    page_width: int
    print_page_height: float
    print_page_width: float
    report_ids: Union["IrActionsReport", bool]

    def _check_format_or_page(self):
        ...

    def _compute_print_page_size(self):
        ...


class ResBank(Model["ResBank"]):
    """
    Merged model for res.bank, built from:
        * odoo.addons.base.models.res_bank.Bank
    """

    _name = "res.bank"

    active: bool
    bic: str
    city: str
    country: Union["ResCountry", bool]
    email: str
    name: str
    phone: str
    state: Union["ResCountryState", bool]
    street2: str
    street: str
    zip: str

    def _onchange_country_id(self):
        ...

    def _onchange_state(self):
        ...


class ResCompany(Model["ResCompany"]):
    """
    Merged model for res.company, built from:
        * odoo.addons.base.models.res_company.Company
        * odoo.addons.base.populate.res_company.Partner
    """

    _name = "res.company"

    bank_ids: Union["ResPartnerBank", bool]
    base_onboarding_company_state: str
    child_ids: Union["ResCompany", bool]
    city: str
    company_registry: str
    country_id: Union["ResCountry", bool]
    currency_id: Union["ResCurrency", bool]
    email: str
    external_report_layout_id: Union["IrUiView", bool]
    favicon: bytes
    font: str
    logo: bytes
    logo_web: bytes
    name: str
    paperformat_id: Union["ReportPaperformat", bool]
    parent_id: Union["ResCompany", bool]
    partner_id: Union["ResPartner", bool]
    phone: str
    primary_color: str
    report_footer: str
    report_header: str
    secondary_color: str
    sequence: int
    state_id: Union["ResCountryState", bool]
    street2: str
    street: str
    user_ids: Union["ResUsers", bool]
    vat: str
    website: str
    zip: str

    def _check_parent_id(self):
        ...

    def _company_default_get(self, object=False, field=False):
        ...

    def _compute_address(self):
        ...

    def _compute_logo_web(self):
        ...

    def _default_currency_id(self):
        ...

    def _get_company_address_field_names(self):
        ...

    def _get_company_address_update(self, partner):
        ...

    def _get_default_favicon(self, original=False):
        ...

    def _get_logo(self):
        ...

    def _get_main_company(self):
        ...

    def _inverse_city(self):
        ...

    def _inverse_country(self):
        ...

    def _inverse_state(self):
        ...

    def _inverse_street(self):
        ...

    def _inverse_street2(self):
        ...

    def _inverse_zip(self):
        ...

    def _onchange_country_id(self):
        ...

    def _onchange_state(self):
        ...

    def action_open_base_onboarding_company(self):
        ...

    def action_save_onboarding_company_step(self):
        ...

    def cache_restart(self):
        ...

    def get_and_update_onbarding_state(self, onboarding_state, steps_states):
        ...

    def open_company_edit_report(self):
        ...

    def set_onboarding_step_done(self, step_name):
        ...

    def write_company_and_print_report(self):
        ...


class ResConfig(TransientModel["ResConfig"]):
    """
    Merged model for res.config, built from:
        * odoo.addons.base.models.res_config.ResConfigConfigurable
    """

    _name = "res.config"

    def action_cancel(self):
        ...

    def action_next(self):
        ...

    def action_skip(self):
        ...

    def cancel(self):
        ...

    def execute(self):
        ...

    def next(self):
        ...

    def start(self):
        ...


class ResConfigInstaller(TransientModel[Union["ResConfigInstaller", "ResConfig"]]):
    """
    Merged model for res.config.installer, built from:
        * odoo.addons.base.models.res_config.ResConfigInstaller

    And inherits from:
        * res.config
    """

    _name = "res.config.installer"

    def _already_installed(self):
        ...

    def _install_modules(self, modules):
        ...

    def already_installed(self):
        ...

    def modules_to_install(self):
        ...


class ResConfigSettings(TransientModel["ResConfigSettings"]):
    """
    Merged model for res.config.settings, built from:
        * odoo.addons.base.models.res_config.ResConfigSettings
    """

    _name = "res.config.settings"

    def _get_classified_fields(self):
        ...

    def _install_modules(self, modules):
        ...

    def cancel(self):
        ...

    def execute(self):
        ...

    def get_config_warning(self, msg):
        ...

    def get_option_name(self, full_field_name):
        ...

    def get_option_path(self, menu_xml_id):
        ...

    def get_values(self):
        ...

    def onchange_module(self, field_value, module_name):
        ...

    def set_values(self):
        ...


class ResCountry(Model["ResCountry"]):
    """
    Merged model for res.country, built from:
        * odoo.addons.base.models.res_country.Country
    """

    _name = "res.country"

    address_format: str
    address_view_id: Union["IrUiView", bool]
    code: str
    country_group_ids: Union["ResCountryGroup", bool]
    currency_id: Union["ResCurrency", bool]
    image_url: str
    name: str
    name_position: str
    phone_code: int
    state_ids: Union["ResCountryState", bool]
    state_required: bool
    vat_label: str
    zip_required: bool

    def _check_address_format(self):
        ...

    def _compute_image_url(self):
        ...

    def get_address_fields(self):
        ...


class ResCountryGroup(Model["ResCountryGroup"]):
    """
    Merged model for res.country.group, built from:
        * odoo.addons.base.models.res_country.CountryGroup
    """

    _name = "res.country.group"

    country_ids: Union["ResCountry", bool]
    name: str


class ResCountryState(Model["ResCountryState"]):
    """
    Merged model for res.country.state, built from:
        * odoo.addons.base.models.res_country.CountryState
    """

    _name = "res.country.state"

    code: str
    country_id: Union["ResCountry", bool]
    name: str


class ResCurrency(Model["ResCurrency"]):
    """
    Merged model for res.currency, built from:
        * odoo.addons.base.models.res_currency.Currency
    """

    _name = "res.currency"

    active: bool
    currency_subunit_label: str
    currency_unit_label: str
    date: date
    decimal_places: int
    name: str
    position: str
    rate: float
    rate_ids: Union["ResCurrencyRate", bool]
    rounding: float
    symbol: str

    def _check_company_currency_stays_active(self):
        ...

    def _compute(self, from_currency, to_currency, from_amount, round=True):
        ...

    def _compute_current_rate(self):
        ...

    def _compute_date(self):
        ...

    def _compute_decimal_places(self):
        ...

    def _convert(self, from_amount, to_currency, company, date, round=True):
        ...

    def _get_conversion_rate(self, from_currency, to_currency, company, date):
        ...

    def _get_rates(self, company, date):
        ...

    def _select_companies_rates(self):
        ...

    def amount_to_text(self, amount):
        ...

    def compare_amounts(self, amount1, amount2):
        ...

    def compute(self, from_amount, to_currency, round=True):
        ...

    def is_zero(self, amount):
        ...

    def round(self, amount):
        ...


class ResCurrencyRate(Model["ResCurrencyRate"]):
    """
    Merged model for res.currency.rate, built from:
        * odoo.addons.base.models.res_currency.CurrencyRate
    """

    _name = "res.currency.rate"

    company_id: Union["ResCompany", bool]
    currency_id: Union["ResCurrency", bool]
    name: date
    rate: float


class ResGroups(Model["ResGroups"]):
    """
    Merged model for res.groups, built from:
        * odoo.addons.base.models.res_users.Groups
        * odoo.addons.base.models.res_users.GroupsImplied
        * odoo.addons.base.models.res_users.GroupsView
    """

    _name = "res.groups"

    category_id: Union["IrModuleCategory", bool]
    color: int
    comment: str
    full_name: str
    implied_ids: Union["ResGroups", bool]
    menu_access: Union["IrUiMenu", bool]
    model_access: Union["IrModelAccess", bool]
    name: str
    rule_groups: Union["IrRule", bool]
    share: bool
    trans_implied_ids: Union["ResGroups", bool]
    users: Union["ResUsers", bool]
    view_access: Union["IrUiView", bool]

    def _check_one_user_type(self):
        ...

    def _compute_full_name(self):
        ...

    def _compute_trans_implied(self):
        ...

    def _get_hidden_extra_categories(self):
        ...

    def _search_full_name(self, operator, operand):
        ...

    def _update_user_groups_view(self):
        ...

    def get_application_groups(self, domain):
        ...

    def get_groups_by_application(self):
        ...


class ResLang(Model["ResLang"]):
    """
    Merged model for res.lang, built from:
        * odoo.addons.base.models.res_lang.Lang
    """

    _name = "res.lang"

    active: bool
    code: str
    date_format: str
    decimal_point: str
    direction: str
    flag_image: bytes
    flag_image_url: str
    grouping: str
    iso_code: str
    name: str
    thousands_sep: str
    time_format: str
    url_code: str
    week_start: str

    def _activate_lang(self, code):
        ...

    def _check_active(self):
        ...

    def _check_format(self):
        ...

    def _check_grouping(self):
        ...

    def _compute_field_flag_image_url(self):
        ...

    def _create_lang(self, lang, lang_name=None):
        ...

    def _data_get(self, monetary=False):
        ...

    def _get_cached(self, field):
        ...

    def _get_cached_values(self):
        ...

    def _lang_code_to_urlcode(self, code):
        ...

    def _lang_get(self, code):
        ...

    def _lang_get_code(self, url_code):
        ...

    def _lang_get_id(self, code):
        ...

    def format(self, percent, value, grouping=False, monetary=False):
        ...

    def get_available(self):
        ...

    def get_installed(self):
        ...

    def get_sorted(self):
        ...

    def install_lang(self):
        ...

    def load_lang(self, lang, lang_name=None):
        ...


class ResPartner(Model[Union["ResPartner", "FormatAddressMixin", "ImageMixin"]]):
    """
    Merged model for res.partner, built from:
        * odoo.addons.base.models.res_partner.Partner
        * odoo.addons.base.populate.res_partner.Partner

    And inherits from:
        * format.address.mixin
        * image.mixin
    """

    _name = "res.partner"

    active: bool
    active_lang_count: int
    bank_ids: Union["ResPartnerBank", bool]
    barcode: str
    category_id: Union["ResPartnerCategory", bool]
    child_ids: Union["ResPartner", bool]
    city: str
    color: int
    comment: str
    commercial_company_name: str
    commercial_partner_id: Union["ResPartner", bool]
    company_id: Union["ResCompany", bool]
    company_name: str
    company_type: str
    contact_address: str
    country_id: Union["ResCountry", bool]
    credit_limit: float
    date: date
    display_name: str
    email: str
    email_formatted: str
    employee: bool
    function: str
    industry_id: Union["ResPartnerIndustry", bool]
    is_company: bool
    lang: str
    mobile: str
    name: str
    parent_id: Union["ResPartner", bool]
    parent_name: str
    partner_latitude: float
    partner_longitude: float
    partner_share: bool
    phone: str
    ref: str
    same_vat_partner_id: Union["ResPartner", bool]
    self: Union["ResPartner", bool]
    state_id: Union["ResCountryState", bool]
    street2: str
    street: str
    title: Union["ResPartnerTitle", bool]
    type: str
    tz: str
    tz_offset: str
    user_id: Union["ResUsers", bool]
    user_ids: Union["ResUsers", bool]
    vat: str
    website: str
    zip: str

    def _address_fields(self):
        ...

    def _check_barcode_unicity(self):
        ...

    def _check_import_consistency(self, vals_list):
        ...

    def _check_parent_id(self):
        ...

    def _children_sync(self, values):
        ...

    def _clean_website(self, website):
        ...

    def _commercial_fields(self):
        ...

    def _commercial_sync_from_company(self):
        ...

    def _commercial_sync_to_children(self):
        ...

    def _compute_active_lang_count(self):
        ...

    def _compute_commercial_company_name(self):
        ...

    def _compute_commercial_partner(self):
        ...

    def _compute_company_type(self):
        ...

    def _compute_contact_address(self):
        ...

    def _compute_email_formatted(self):
        ...

    def _compute_get_ids(self):
        ...

    def _compute_partner_share(self):
        ...

    def _compute_same_vat_partner_id(self):
        ...

    def _compute_tz_offset(self):
        ...

    def _default_category(self):
        ...

    def _display_address(self, without_company=False):
        ...

    def _display_address_depends(self):
        ...

    def _email_send(self, email_from, subject, body, on_error=None):
        ...

    def _fields_sync(self, values):
        ...

    def _formatting_address_fields(self):
        ...

    def _get_address_format(self):
        ...

    def _get_contact_name(self, partner, name):
        ...

    def _get_country_name(self):
        ...

    def _get_default_address_format(self):
        ...

    def _get_gravatar_image(self, email):
        ...

    def _get_name(self):
        ...

    def _get_name_search_order_by_fields(self):
        ...

    def _handle_first_contact_creation(self):
        ...

    def _onchange_company_id(self):
        ...

    def _onchange_country_id(self):
        ...

    def _onchange_parent_id_for_lang(self):
        ...

    def _onchange_state(self):
        ...

    def _parse_partner_name(self, text):
        ...

    def _populate_set_companies(self, records):
        ...

    def _update_fields_values(self, fields):
        ...

    def _write_company_type(self):
        ...

    def address_get(self, adr_pref=None):
        ...

    def create_company(self):
        ...

    def find_or_create(self, email, assert_valid_email=False):
        ...

    def get_import_templates(self):
        ...

    def main_partner(self):
        ...

    def onchange_company_type(self):
        ...

    def onchange_email(self):
        ...

    def onchange_parent_id(self):
        ...

    def open_commercial_entity(self):
        ...

    def open_parent(self):
        ...

    def update_address(self, vals):
        ...


class ResPartnerBank(Model["ResPartnerBank"]):
    """
    Merged model for res.partner.bank, built from:
        * odoo.addons.base.models.res_bank.ResPartnerBank
    """

    _name = "res.partner.bank"

    acc_holder_name: str
    acc_number: str
    acc_type: str
    active: bool
    bank_bic: str
    bank_id: Union["ResBank", bool]
    bank_name: str
    company_id: Union["ResCompany", bool]
    currency_id: Union["ResCurrency", bool]
    partner_id: Union["ResPartner", bool]
    sanitized_acc_number: str
    sequence: int

    def _compute_acc_type(self):
        ...

    def _compute_sanitized_acc_number(self):
        ...

    def _get_supported_account_types(self):
        ...

    def get_supported_account_types(self):
        ...

    def retrieve_acc_type(self, acc_number):
        ...


class ResPartnerCategory(Model["ResPartnerCategory"]):
    """
    Merged model for res.partner.category, built from:
        * odoo.addons.base.models.res_partner.PartnerCategory
    """

    _name = "res.partner.category"

    active: bool
    child_ids: Union["ResPartnerCategory", bool]
    color: int
    name: str
    parent_id: Union["ResPartnerCategory", bool]
    parent_path: str
    partner_ids: Union["ResPartner", bool]

    def _check_parent_id(self):
        ...

    def _get_default_color(self):
        ...


class ResPartnerIndustry(Model["ResPartnerIndustry"]):
    """
    Merged model for res.partner.industry, built from:
        * odoo.addons.base.models.res_partner.ResPartnerIndustry
        * odoo.addons.base.populate.res_partner.ResPartnerIndustry
    """

    _name = "res.partner.industry"

    active: bool
    full_name: str
    name: str


class ResPartnerTitle(Model["ResPartnerTitle"]):
    """
    Merged model for res.partner.title, built from:
        * odoo.addons.base.models.res_partner.PartnerTitle
    """

    _name = "res.partner.title"

    name: str
    shortcut: str


class ResUsers(Model["ResUsers"]):
    """
    Merged model for res.users, built from:
        * odoo.addons.base.models.res_users.APIKeysUser
        * odoo.addons.base.models.res_users.Users
        * odoo.addons.base.models.res_users.UsersImplied
        * odoo.addons.base.models.res_users.UsersView
        * odoo.addons.base.populate.res_user.Users
    """

    _name = "res.users"

    accesses_count: int
    action_id: Union["IrActionsActions", bool]
    active: bool
    active_partner: bool
    api_key_ids: Union["ResUsersApikeys", bool]
    companies_count: int
    company_id: Union["ResCompany", bool]
    company_ids: Union["ResCompany", bool]
    email: str
    groups_count: int
    groups_id: Union["ResGroups", bool]
    image_1920: bytes
    log_ids: Union["ResUsersLog", bool]
    login: str
    login_date: datetime
    name: str
    new_password: str
    partner_id: Union["ResPartner", bool]
    password: str
    rules_count: int
    share: bool
    signature: str
    tz_offset: str

    @classmethod
    def _login(cls, db, login, password, user_agent_env):
        ...

    @classmethod
    def authenticate(cls, db, login, password, user_agent_env):
        ...

    @classmethod
    def check(cls, db, uid, passwd):
        ...

    def _add_reified_groups(self, fields, values):
        ...

    def _assert_can_auth(self):
        ...

    def _check_action_id(self):
        ...

    def _check_credentials(self, password, user_agent_env):
        ...

    def _check_one_user_type(self):
        ...

    def _compute_accesses_count(self):
        ...

    def _compute_companies_count(self):
        ...

    def _compute_password(self):
        ...

    def _compute_session_token(self, sid):
        ...

    def _compute_share(self):
        ...

    def _compute_tz_offset(self):
        ...

    def _crypt_context(self):
        ...

    def _default_groups(self):
        ...

    def _get_default_image(self):
        ...

    def _get_email_domain(self, email):
        ...

    def _get_login_domain(self, login):
        ...

    def _get_login_order(self):
        ...

    def _get_session_token_fields(self):
        ...

    def _has_group(self, group_ext_id):
        ...

    def _has_multiple_groups(self, group_ids):
        ...

    def _is_admin(self):
        ...

    def _is_public(self):
        ...

    def _is_superuser(self):
        ...

    def _is_system(self):
        ...

    def _mfa_type(self):
        ...

    def _mfa_url(self):
        ...

    def _on_login_cooldown(self, failures, previous):
        ...

    def _remove_reified_groups(self, values):
        ...

    def _rpc_api_keys_only(self):
        ...

    def _set_encrypted_password(self, uid, pw):
        ...

    def _set_new_password(self):
        ...

    def _set_password(self):
        ...

    def _update_last_login(self):
        ...

    def action_get(self):
        ...

    def action_show_accesses(self):
        ...

    def action_show_groups(self):
        ...

    def action_show_rules(self):
        ...

    def api_key_wizard(self):
        ...

    def change_password(self, old_passwd, new_passwd):
        ...

    def check_super(self, passwd):
        ...

    def context_get(self):
        ...

    def get_company_currency_id(self):
        ...

    def has_group(self, group_ext_id):
        ...

    def on_change_login(self):
        ...

    def onchange_parent_id(self):
        ...

    def preference_change_password(self):
        ...

    def preference_save(self):
        ...


class ResUsersApikeys(Model["ResUsersApikeys"]):
    """
    Merged model for res.users.apikeys, built from:
        * odoo.addons.base.models.res_users.APIKeys
    """

    _name = "res.users.apikeys"

    create_date: datetime
    name: str
    scope: str
    user_id: Union["ResUsers", bool]

    def _check_credentials(self, scope, key):
        ...

    def _generate(self, scope, name):
        ...

    def _remove(self):
        ...

    def remove(self):
        ...


class ResUsersApikeysDescription(TransientModel["ResUsersApikeysDescription"]):
    """
    Merged model for res.users.apikeys.description, built from:
        * odoo.addons.base.models.res_users.APIKeyDescription
    """

    _name = "res.users.apikeys.description"

    name: str

    def make_key(self):
        ...


class ResUsersApikeysShow(AbstractModel["ResUsersApikeysShow"]):
    """
    Merged model for res.users.apikeys.show, built from:
        * odoo.addons.base.models.res_users.APIKeyShow
    """

    _name = "res.users.apikeys.show"

    key: str


class ResUsersIdentitycheck(TransientModel["ResUsersIdentitycheck"]):
    """
    Merged model for res.users.identitycheck, built from:
        * odoo.addons.base.models.res_users.CheckIdentity
    """

    _name = "res.users.identitycheck"

    password: str
    request: str

    def run_check(self):
        ...


class ResUsersLog(Model["ResUsersLog"]):
    """
    Merged model for res.users.log, built from:
        * odoo.addons.base.models.res_users.ResUsersLog
    """

    _name = "res.users.log"

    def _gc_user_logs(self):
        ...


class ResetViewArchWizard(TransientModel["ResetViewArchWizard"]):
    """
    Merged model for reset.view.arch.wizard, built from:
        * odoo.addons.base.models.ir_ui_view.ResetViewArchWizard
    """

    _name = "reset.view.arch.wizard"

    arch_diff: str
    arch_to_compare: str
    compare_view_id: Union["IrUiView", bool]
    has_diff: bool
    reset_mode: str
    view_id: Union["IrUiView", bool]
    view_name: str

    def _compute_arch_diff(self):
        ...

    def reset_view_button(self):
        ...


class Unknown(AbstractModel["Unknown"]):
    """
    Merged model for _unknown, built from:
        * odoo.addons.base.models.ir_model.Unknown
    """

    _name = "_unknown"


class WizardIrModelMenuCreate(TransientModel["WizardIrModelMenuCreate"]):
    """
    Merged model for wizard.ir.model.menu.create, built from:
        * odoo.addons.base.models.ir_model.WizardModelMenu
    """

    _name = "wizard.ir.model.menu.create"

    menu_id: Union["IrUiMenu", bool]
    name: str

    def menu_create(self):
        ...
